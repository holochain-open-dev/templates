# `<create-{{kebab_case entry_type.name}}>`

## Usage

0. If you haven't already, [go through the setup for the module](/setup).

1. Import the `<create-{{kebab_case entry_type.name}}>` element somewhere in the javascript side of your web-app like this:

```js
import '@holochain-open-dev/{{kebab_case coordinator_zome_manifest.name}}/dist/elements/create-{{kebab_case entry_type.name}}.js'
```

2. Use it in the html side of your web-app like this:


::: code-group
```html [Lit]
<create-{{kebab_case entry_type.name}} 
  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (not (eq cardinality "vector" ) )}}
  .{{camel_case field_name}}=${ {{camel_case field_name}} }
      {{else}}
  .{{camel_case field_name}}=${[{{camel_case field_name}}]}
      {{/if}}
    {{/if}}
  {{/each}}
>
</create-{{kebab_case entry_type.name}}>
```

```html [React]
<create-{{kebab_case entry_type.name}}
  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (not (eq cardinality "vector" ) )}}
  {{camel_case field_name}}={ {{camel_case field_name}} }
      {{else}}
  {{camel_case field_name}}={[{{camel_case field_name}}]}
      {{/if}}
    {{/if}}
  {{/each}}
>
</create-{{kebab_case entry_type.name}}>
```

```html [Angular]
<create-{{kebab_case entry_type.name}}
  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (not (eq cardinality "vector" ) )}}
  [{{camel_case field_name}}]="{{camel_case field_name}}"
      {{else}}
  [{{camel_case field_name}}]="[{{camel_case field_name}}]"
      {{/if}}
    {{/if}}
  {{/each}}
>
</create-{{kebab_case entry_type.name}}>
```

```html [Vue]
<create-{{kebab_case entry_type.name}}
  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (not (eq cardinality "vector" ) )}}
  :{{camel_case field_name}}="{{camel_case field_name}}"
      {{else}}
  :{{camel_case field_name}}="[{{camel_case field_name}}]"
      {{/if}}
    {{/if}}
  {{/each}}
>
</create-{{kebab_case entry_type.name}}>
```

```html [Svelte]
<create-{{kebab_case entry_type.name}}
  {{#each entry_type.fields}}
    {{#if (not widget) }}
      {{#if (not (eq cardinality "vector" ) )}}
  {{kebab_case field_name}}={encodeHashToBase64({{camel_case field_name}})}
      {{else}}
  {{kebab_case field_name}}={[encodeHashToBase64({{camel_case field_name}})]}
      {{/if}}
    {{/if}}
  {{/each}}
>
</create-{{kebab_case entry_type.name}}>
```
:::

> [!WARNING]
> Like all the elements in this module, `<create-{{kebab_case entry_type.name}}>` needs to be placed inside an initialized `<{{kebab_case coordinator_zome_manifest.name}}-context>`.

## Demo

Here is an interactive demo of the element:

<element-demo>
</element-demo>

<script setup>
import { onMounted } from "vue";
import { ProfilesClient, ProfilesStore } from '@holochain-open-dev/profiles';
import { demoProfiles, ProfilesZomeMock } from '@holochain-open-dev/profiles/dist/mocks.js';
import { decodeHashFromBase64 } from '@holochain/client';
import { render, html } from "lit";

import { {{pascal_case coordinator_zome_manifest.name}}ZomeMock, sample{{pascal_case entry_type.name}} } from "../../ui/src/mocks.ts";
import { {{pascal_case coordinator_zome_manifest.name}}Store } from "../../ui/src/{{kebab_case coordinator_zome_manifest.name}}-store.ts";
import { {{pascal_case coordinator_zome_manifest.name}}Client } from "../../ui/src/{{kebab_case coordinator_zome_manifest.name}}-client.ts";

onMounted(async () => {
  // Elements need to be imported on the client side, not the SSR side
  // Reference: https://vitepress.dev/guide/ssr-compat#importing-in-mounted-hook
  await import('@api-viewer/docs/lib/api-docs.js');
  await import('@api-viewer/demo/lib/api-demo.js');
  await import('@holochain-open-dev/profiles/dist/elements/profiles-context.js');
  if (!customElements.get('{{kebab_case coordinator_zome_manifest.name}}-context')) await import('../../ui/src/elements/{{kebab_case coordinator_zome_manifest.name}}-context.ts');
  if (!customElements.get('create-{{kebab_case entry_type.name}}')) await import('../../ui/src/elements/create-{{kebab_case entry_type.name}}.ts');

  const profiles = await demoProfiles();

  const profilesMock = new ProfilesZomeMock(
    profiles,
    Array.from(profiles.keys())[0]
  );
  const profilesStore = new ProfilesStore(new ProfilesClient(profilesMock, "{{snake_case dna_role_name}}"));

  const mock = new {{pascal_case coordinator_zome_manifest.name}}ZomeMock();
  const client = new {{pascal_case coordinator_zome_manifest.name}}Client(mock, "{{snake_case dna_role_name}}");

  const {{camel_case entry_type.name}} = await sample{{pascal_case entry_type.name}}(client);

  const record = await mock.create_{{snake_case entry_type.name}}({{camel_case entry_type.name}});

  const store = new {{pascal_case coordinator_zome_manifest.name}}Store(client);
  
  render(html`
    <profiles-context .store=${profilesStore}>
      <{{kebab_case coordinator_zome_manifest.name}}-context .store=${store}>
        <api-demo src="custom-elements.json" only="create-{{kebab_case entry_type.name}}" exclude-knobs="store">
        </api-demo>
      </{{kebab_case coordinator_zome_manifest.name}}-context>
    </profiles-context>
  `, document.querySelector('element-demo'))
  })


</script>

## API Reference

`<create-{{kebab_case entry_type.name}}>` is a [custom element](https://web.dev/articles/custom-elements-v1), which means that it can be used in any web app or website. Here is the reference for its API:

<api-docs src="custom-elements.json" only="create-{{kebab_case entry_type.name}}">
</api-docs>
