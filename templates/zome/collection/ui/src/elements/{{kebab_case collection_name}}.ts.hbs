import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { AgentPubKey, EntryHash, ActionHash, Record } from '@holochain/client';
import { subscribe } from '@holochain-open-dev/stores';
import { consume } from '@lit/context';
import { localized, msg } from '@lit/localize';
import { hashProperty, sharedStyles, wrapPathInSvg, renderAsyncStatus } from '@holochain-open-dev/elements';
import { mdiInformationOutline } from '@mdi/js';

import '@holochain-open-dev/elements/dist/elements/display-error.js';
import '@shoelace-style/shoelace/dist/components/spinner/spinner.js';
import '@shoelace-style/shoelace/dist/components/icon/icon.js';

import './{{kebab_case referenceable.name}}-summary.js';
import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store.js';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context.js';

/**
 * @element {{kebab_case collection_name}}
 */
@localized()
@customElement('{{kebab_case collection_name}}')
export class {{pascal_case collection_name}} extends LitElement {
  {{#if (eq collection_type.type "ByAuthor")}}

  // REQUIRED. The author for which the {{plural (pascal_case referenceable.name)}} should be fetched
  @property(hashProperty('author'))
  author!: AgentPubKey;
  {{/if}}
  
  /**
   * @internal
   */
  @consume({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  {{#if (eq collection_type.type "ByAuthor")}}
  firstUpdated() {
    if (this.author === undefined) {
      throw new Error(`The author property is required for the {{pascal_case collection_name}} element`);
    }
  }
  {{/if}}

  renderList(hashes: Array<{{referenceable.hash_type}}>) {
    if (hashes.length === 0) 
      return html` <div class="column center-content" style="gap: 16px;">
        <sl-icon
          .src=${wrapPathInSvg(mdiInformationOutline)}
          style="color: grey; height: 64px; width: 64px;"
          ></sl-icon
        >
        <span class="placeholder">${msg("No {{lower_case (plural referenceable.name)}} found")}</span>
      </div>`;

    return html`
      <div class="column" style="gap: 16px; flex: 1">
        ${hashes.map(hash => 
          html`<{{kebab_case referenceable.name}}-summary .{{camel_case referenceable.name}}Hash=${hash}></{{kebab_case referenceable.name}}-summary>`
        )}
      </div>
    `;
  }

  render() {
    return html`${subscribe(this.{{camel_case coordinator_zome_manifest.name}}Store.{{camel_case collection_name}}{{#if (eq collection_type.type "ByAuthor")}}.get(this.author){{/if}},
      renderAsyncStatus({
        complete: map => this.renderList(Array.from(map.keys())),
        pending: () => html`<div
          style="display: flex; flex-direction: column; align-items: center; justify-content: center; flex: 1;"
        >
          <sl-spinner style="font-size: 2rem;"></sl-spinner>
        </div>`,
        error: e => html`<display-error
          .headline=${msg("Error fetching the {{lower_case (plural referenceable.name)}}")}
          .error=${e}
        ></display-error>`
      })
    )}`;
  }
  
  static styles = [sharedStyles];
}
