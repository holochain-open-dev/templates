{{#merge previous_file_content}}
  {{#match_scope (concat "export class " (pascal_case coordinator_zome_manifest.name) "Client extends ZomeClient<" (pascal_case coordinator_zome_manifest.name) "Signal> {" ) }}
  {{previous_scope_content}}

  /** {{title_case (plural to_referenceable.name)}} for {{title_case from_referenceable.name}} */

  async get{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}}): Promise<Array<Link>> {
    return this.callZome('get_{{snake_case (plural to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}', {{camel_case from_referenceable.singular_arg}});
  }
    {{#if delete}}

  async getDeleted{{pascal_case (plural to_referenceable.name)}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}}): Promise<Array<[SignedActionHashed<CreateLink>, SignedActionHashed<DeleteLink>[]]>> {
    return this.callZome('get_deleted_{{snake_case (plural to_referenceable.name)}}_for_{{snake_case from_referenceable.name}}', {{camel_case from_referenceable.singular_arg}});
  }
    {{/if}}
  
  add{{pascal_case to_referenceable.name}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}}, {{camel_case to_referenceable.singular_arg}}: {{to_referenceable.hash_type}}): Promise<void> {
    return this.callZome('add_{{snake_case to_referenceable.name}}_for_{{snake_case from_referenceable.name}}', {
      base_{{snake_case from_referenceable.singular_arg}}: {{camel_case from_referenceable.singular_arg}},
      target_{{snake_case to_referenceable.singular_arg}}: {{camel_case to_referenceable.singular_arg}},
    });
  }

    {{#if delete}}
  remove{{pascal_case to_referenceable.name}}For{{pascal_case from_referenceable.name}}({{camel_case from_referenceable.singular_arg}}: {{from_referenceable.hash_type}}, {{camel_case to_referenceable.singular_arg}}: {{to_referenceable.hash_type}}): Promise<void> {
    return this.callZome('remove_{{snake_case to_referenceable.name}}_for_{{snake_case from_referenceable.name}}', {
      base_{{snake_case from_referenceable.singular_arg}}: {{camel_case from_referenceable.singular_arg}},
      target_{{snake_case to_referenceable.singular_arg}}: {{camel_case to_referenceable.singular_arg}},
    });
  }

    {{/if}}
    {{#if bidirectional}}
  async get{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}}: {{to_referenceable.hash_type}}): Promise<Array<Link>> {
    return this.callZome('get_{{snake_case (plural from_referenceable.name)}}_for_{{snake_case to_referenceable.name}}', {{camel_case to_referenceable.singular_arg}});
  }
      {{#if delete}}

  async getDeleted{{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}}({{camel_case to_referenceable.singular_arg}}: {{to_referenceable.hash_type}}): Promise<Array<[SignedActionHashed<CreateLink>, SignedActionHashed<DeleteLink>[]]>> {
    return this.callZome('get_deleted_{{snake_case (plural from_referenceable.name)}}_for_{{snake_case to_referenceable.name}}', {{camel_case to_referenceable.singular_arg}});
  }
      {{/if}}
    {{/if}}
  {{/match_scope}}
{{/merge}}
