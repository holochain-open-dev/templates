# `{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}`

## Usage

0. If you haven't already, [go through the setup for the module](/setup).

1. Import the `{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}` element somewhere in the javascript side of your web-app like this:

```js
import '@holochain-open-dev/{{kebab_case app_name}}/dist/elements/{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}.js'
```

2. Use it in the html side of your web-app like this:

```html
<{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}>
</{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}>
```

> [!WARNING]
> Like all the elements in this module, `<{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}>` needs to be placed inside an initialized `<{{kebab_case app_name}}-context>`.

## Demo

Here is an interactive demo of the element:

<element-demo>
</element-demo>

<script setup>
import { onMounted } from "vue";
import { {{pascal_case app_name}}ZomeMock, sample{{pascal_case ../entry_type.name}} } from "@holochain-open-dev/{{kebab_case app_name}}/dist/mocks.js";
import { {{pascal_case app_name}}Store, {{pascal_case app_name}}Client } from "@holochain-open-dev/{{kebab_case app_name}}";
import { decodeHashFromBase64 } from '@holochain/client';
import { render, html } from "lit";

onMounted(async () => {
  // Elements need to be imported on the client side, not the SSR side
  // Reference: https://vitepress.dev/guide/ssr-compat#importing-in-mounted-hook
  await import('@api-viewer/docs/lib/api-docs.js');
  await import('@api-viewer/demo/lib/api-demo.js');
  await import('@holochain-open-dev/{{kebab_case app_name}}/dist/elements/{{kebab_case app_name}}-context.js');
  await import('@holochain-open-dev/{{kebab_case app_name}}/dist/elements/{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}.js');

  const mock = new {{pascal_case app_name}}ZomeMock();
  const client = new {{pascal_case app_name}}Client(mock);

  const {{camel_case ../entry_type.name}} = await sample{{pascal_case ../entry_type.name}}(client);

  const record = await mock.create_{{snake_case ../entry_type.name}}({{camel_case ../entry_type.name}});

  const store = new {{pascal_case app_name}}Store(client);
  
  render(html`
    <{{kebab_case app_name}}-context .store=${store}>
      <api-demo src="custom-elements.json" only="{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}" exclude-knobs="store">
        <{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}} {{#if (eq cardinality "vector")}}.{{camel_case linked_from.name}}=${ {{camel_case ../entry_type.name}}.{{field_name}}[0] }{{else}}.{{camel_case linked_from.name}}=${ {{camel_case ../entry_type.name}}.{{field_name}} } {{/if}}></{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}>
      </api-demo>
    </{{kebab_case app_name}}-context>
  `, document.querySelector('element-demo'))
  })

</script>

## API Reference

`{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}` is a [custom element](https://web.dev/articles/custom-elements-v1), which means that it can be used in any web app or website. Here is the reference for its API:

<api-docs src="custom-elements.json" only="{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}">
</api-docs>
