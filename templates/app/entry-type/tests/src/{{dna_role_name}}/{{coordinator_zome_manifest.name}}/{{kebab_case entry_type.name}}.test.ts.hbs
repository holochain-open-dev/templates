import { assert, test } from "vitest";

import { runScenario, dhtSync } from '@holochain/tryorama';
import { ActionHash, SignedActionHashed, Delete, Record } from '@holochain/client';
import { decode } from '@msgpack/msgpack';
import { EntryRecord } from '@holochain-open-dev/utils';
import { cleanNodeDecoding } from '@holochain-open-dev/utils/dist/clean-node-decoding.js';
import { toPromise } from '@holochain-open-dev/signals';

import { {{pascal_case entry_type.name}} } from '../../../../ui/src/{{dna_role_name}}/{{snake_case coordinator_zome_manifest.name}}/types.js';
import { sample{{pascal_case entry_type.name}} } from '../../../../ui/src/{{dna_role_name}}/{{snake_case coordinator_zome_manifest.name}}/mocks.js';
import { setup } from './setup.js';

test('create {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

    // Alice creates a {{pascal_case entry_type.name}}
    const {{camel_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.create{{pascal_case entry_type.name}}(await sample{{pascal_case entry_type.name}}(alice.store.client));
    assert.ok({{camel_case entry_type.name}});
  });
});

test('create and read {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

    const sample = await sample{{pascal_case entry_type.name}}(alice.store.client);

    // Alice creates a {{pascal_case entry_type.name}}
    const {{camel_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.create{{pascal_case entry_type.name}}(sample);
    assert.ok({{camel_case entry_type.name}});

    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );

    // Bob gets the created {{pascal_case entry_type.name}}
    const createReadOutput: EntryRecord<{{pascal_case entry_type.name}}> = await toPromise(bob.store.{{camel_case (plural entry_type.name)}}.get({{camel_case entry_type.name}}{{#if entry_type.reference_entry_hash}}.entryHash{{else}}.actionHash{{/if}}){{#if crud.update}}.original{{else}}.entry{{/if}}$);
    assert.deepEqual(sample, cleanNodeDecoding(createReadOutput.entry));
  });
});

{{#if crud.update}}
test('create and update {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

    // Alice creates a {{pascal_case entry_type.name}}
    const {{camel_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.create{{pascal_case entry_type.name}}(await sample{{pascal_case entry_type.name}}(alice.store.client));
    assert.ok({{camel_case entry_type.name}});
        
    const originalActionHash = {{camel_case entry_type.name}}.actionHash;
 
    // Alice updates the {{pascal_case entry_type.name}}
    let contentUpdate = await sample{{pascal_case entry_type.name}}(alice.store.client);

    let updated{{pascal_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.update{{pascal_case entry_type.name}}({{#if link_from_original_to_each_update}}originalActionHash, {{/if}}originalActionHash, contentUpdate);
    assert.ok(updated{{pascal_case entry_type.name}});

    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );
        
    // Bob gets the updated {{pascal_case entry_type.name}}
    const readUpdatedOutput0: EntryRecord<{{pascal_case entry_type.name}}> = await toPromise(bob.store.{{camel_case (plural entry_type.name)}}.get({{camel_case entry_type.name}}.actionHash).latestVersion$);
    assert.deepEqual(contentUpdate, cleanNodeDecoding(readUpdatedOutput0.entry));

    // Alice updates the {{pascal_case entry_type.name}} again
    contentUpdate = await sample{{pascal_case entry_type.name}}(alice.store.client);

    updated{{pascal_case entry_type.name}} = await alice.store.client.update{{pascal_case entry_type.name}}({{#if link_from_original_to_each_update}}originalActionHash, {{/if}}updated{{pascal_case entry_type.name}}.actionHash, contentUpdate);
    assert.ok(updated{{pascal_case entry_type.name}});

    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );
        
    // Bob gets the updated {{pascal_case entry_type.name}}
    const readUpdatedOutput1: EntryRecord<{{pascal_case entry_type.name}}> = await toPromise(bob.store.{{camel_case (plural entry_type.name)}}.get(originalActionHash).latestVersion$);
    assert.deepEqual(contentUpdate, cleanNodeDecoding(readUpdatedOutput1.entry));
  });
});
{{/if}}

{{#if crud.delete}}
test('create and delete {{pascal_case entry_type.name}}', async () => {
  await runScenario(async scenario => {
    const { alice, bob } = await setup(scenario);

    // Alice creates a {{pascal_case entry_type.name}}
    const {{camel_case entry_type.name}}: EntryRecord<{{pascal_case entry_type.name}}> = await alice.store.client.create{{pascal_case entry_type.name}}(await sample{{pascal_case entry_type.name}}(alice.store.client));
    assert.ok({{camel_case entry_type.name}});
        
    // Alice deletes the {{pascal_case entry_type.name}}
    const deleteActionHash = await alice.store.client.delete{{pascal_case entry_type.name}}({{camel_case entry_type.name}}.actionHash);
    assert.ok(deleteActionHash);

    // Wait for the created entry to be propagated to the other node.
    await dhtSync(
      [alice.player, bob.player],
      alice.player.cells[0].cell_id[0]
    );
        
    // Bob tries to get the deleted {{pascal_case entry_type.name}}
    const deletes: Array<SignedActionHashed<Delete>> = await toPromise(bob.store.{{camel_case (plural entry_type.name)}}.get({{camel_case entry_type.name}}.actionHash).deletes$);
    assert.equal(deletes.length, 1);
  });
});
{{/if}}
