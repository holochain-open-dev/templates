import { LitElement, html } from 'lit';
import { state, customElement, property } from 'lit/decorators.js';
import { Record, EntryHash, ActionHash, AgentPubKey } from '@holochain/client';
import { AsyncComputed, SignalWatcher } from '@holochain-open-dev/signals';
import { EntryRecord, slice} from '@holochain-open-dev/utils';
import { hashProperty, sharedStyles, wrapPathInSvg } from '@holochain-open-dev/elements';
import { consume } from '@lit/context';
import { localized, msg } from '@lit/localize';
import { mdiInformationOutline } from '@mdi/js';

import '@holochain-open-dev/elements/dist/elements/display-error.js';
import '@shoelace-style/shoelace/dist/components/spinner/spinner.js';
import '@shoelace-style/shoelace/dist/components/icon/icon.js';

{{#if (eq linked_from.hash_type "AgentPubKey")}}
import '@holochain-open-dev/profiles/dist/elements/agent-avatar.js';
{{/if}}

import { {{pascal_case ../coordinator_zome_manifest.name}}Store } from '../{{kebab_case ../coordinator_zome_manifest.name}}-store.js';
import { {{camel_case ../coordinator_zome_manifest.name}}StoreContext } from '../context.js';
import { {{pascal_case ../entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types.js';

{{#if (ne linked_from.hash_type "AgentPubKey")}}
import './{{kebab_case ../entry_type.name}}-summary.js';
{{/if}}

/**
 * @element {{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}
 */
@localized()
@customElement('{{kebab_case (plural ../entry_type.name)}}-for-{{kebab_case linked_from.name}}')
export class {{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} extends SignalWatcher(LitElement) {

  /**
   * REQUIRED. The {{pascal_case linked_from.singular_arg}} for which the {{pascal_case (plural ../entry_type.name)}} should be fetched
   */
  @property(hashProperty('{{kebab_case linked_from.singular_arg}}'))
  {{camel_case linked_from.singular_arg}}!: {{linked_from.hash_type}};

  /**
   * @internal
   */
  @consume({ context: {{camel_case ../coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case ../coordinator_zome_manifest.name}}Store!: {{pascal_case ../coordinator_zome_manifest.name}}Store;
 

  renderList(hashes: Array<{{#if ../entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}>) {
    if (hashes.length === 0) 
      return html` <div class="column center-content" style="gap: 16px;">
        <sl-icon
          style="color: grey; height: 64px; width: 64px;"
          .src=${wrapPathInSvg(mdiInformationOutline)}
        ></sl-icon>
        <span class="placeholder">${msg("No {{lower_case (plural ../entry_type.name)}} found for this {{lower_case linked_from.name}}")}</span>
      </div>`;

    return html`
      <div style="display: flex; flex-direction: column">
        ${hashes.map(hash =>
          html`<{{kebab_case ../entry_type.name}}-summary .{{camel_case ../entry_type.name}}Hash=${hash}></{{kebab_case ../entry_type.name}}-summary>`
        )}
      </div>
    `;
  }

  render() {
  {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
    const hashes = this.{{camel_case ../coordinator_zome_manifest.name}}Store.{{#if (eq linked_from.hash_type "AgentPubKey")}}{{camel_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}.get(this.{{camel_case linked_from.singular_arg}}){{else}}{{camel_case (plural linked_from.name)}}.get(this.{{camel_case linked_from.singular_arg}}).{{camel_case (plural ../entry_type.name)}}{{#if (not ../crud.delete)}}${{/if}}{{/if}}{{#if ../crud.delete}}.live${{/if}}.get();

    switch (hashes.status) {
      case 'pending': 
        return html`<div
          style="display: flex; flex-direction: column; align-items: center; justify-content: center; flex: 1;"
        >
          <sl-spinner style="font-size: 2rem;"></sl-spinner>
        </div>`;
      case 'error': 
        return html`<display-error
          .headline=${msg("Error fetching the {{lower_case (plural ../entry_type.name)}}")}
          .error=${hashes.error}
        ></display-error>`;
      case 'completed':
        return this.renderList(hashes.value);
    }
      
  {{else}}
    const map = this.{{camel_case ../coordinator_zome_manifest.name}}Store.{{#if (eq linked_from.hash_type "AgentPubKey")}}{{camel_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}.get(this.{{camel_case linked_from.singular_arg}}){{else}}{{camel_case (plural linked_from.name)}}.get(this.{{camel_case linked_from.singular_arg}}).{{camel_case (plural ../entry_type.name)}}{{#if (not ../crud.delete)}}${{/if}}{{/if}}{{#if ../crud.delete}}.live${{/if}}.get();

    switch (map.status) {
      case 'pending': 
        return html`<div
          style="display: flex; flex-direction: column; align-items: center; justify-content: center; flex: 1;"
        >
          <sl-spinner style="font-size: 2rem;"></sl-spinner>
        </div>`;
      case 'error': 
        return html`<display-error
          .headline=${msg("Error fetching the {{lower_case (plural ../entry_type.name)}}")}
          .error=${map.error}
        ></display-error>`;
      case 'completed':
        return this.renderList(Array.from(map.value.keys()));
    }
  {{/if}}
  }
  
  static styles = [sharedStyles];
}
