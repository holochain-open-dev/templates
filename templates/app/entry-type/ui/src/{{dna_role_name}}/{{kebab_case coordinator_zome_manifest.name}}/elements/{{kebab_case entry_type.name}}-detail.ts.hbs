import { LitElement, html } from 'lit';
import { state, property, customElement } from 'lit/decorators.js';
import { EntryHash, Record, ActionHash } from '@holochain/client';
import { EntryRecord } from '@holochain-open-dev/utils';
import { SignalWatcher } from '@holochain-open-dev/signals';
import { sharedStyles, hashProperty, wrapPathInSvg, notifyError } from '@holochain-open-dev/elements';
import { consume } from '@lit/context';
import { localized, msg } from '@lit/localize';
import { mdiAlertCircleOutline, mdiPencil, mdiDelete } from '@mdi/js';

{{#uniq_lines}}
import '@holochain-open-dev/elements/dist/elements/display-error.js';
import '@shoelace-style/shoelace/dist/components/card/card.js';
import '@shoelace-style/shoelace/dist/components/spinner/spinner.js';
import '@shoelace-style/shoelace/dist/components/icon-button/icon-button.js';
import SlAlert from '@shoelace-style/shoelace/dist/components/alert/alert.js';
import '@shoelace-style/shoelace/dist/components/alert/alert.js';
import '@shoelace-style/shoelace/dist/components/button/button.js';
  {{#each entry_type.fields}}
    {{#if widget}}
{{> (concat field_type.type "/" widget "/detail/imports") }}

    {{/if}}
  {{/each}}
{{/uniq_lines}}

{{#if crud.update}}
import './edit-{{kebab_case entry_type.name}}.js';
{{/if}}

import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store.js';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context.js';
import { {{pascal_case entry_type.name}}{{#each entry_type.fields}}{{#if (eq field_type.type "Enum")}}, {{field_type.label}}{{/if}}{{/each}} } from '../types.js';

/**
 * @element {{kebab_case entry_type.name}}-detail
 * @fires {{kebab_case entry_type.name}}-deleted: detail will contain { {{camel_case entry_type.name}}Hash }
 */
@localized()
@customElement('{{kebab_case entry_type.name}}-detail')
export class {{pascal_case entry_type.name}}Detail extends SignalWatcher(LitElement) {

  /**
   * REQUIRED. The hash of the {{pascal_case entry_type.name}} to show
   */
  @property(hashProperty('{{kebab_case entry_type.name}}-hash'))
  {{camel_case entry_type.name}}Hash!: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}};

  /**
   * @internal
   */
  @consume({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;

  {{#if crud.update}}
  /**
   * @internal
   */
  @state()
  _editing = false;
  {{/if}}

  {{#if crud.delete}}
  async delete{{pascal_case entry_type.name}}() {
    try {
      await this.{{camel_case coordinator_zome_manifest.name}}Store.client.delete{{pascal_case entry_type.name}}(this.{{camel_case entry_type.name}}Hash);
 
      this.dispatchEvent(new CustomEvent('{{kebab_case entry_type.name}}-deleted', {
        bubbles: true,
        composed: true,
        detail: {
          {{camel_case entry_type.name}}Hash: this.{{camel_case entry_type.name}}Hash
        }
      }));
    } catch (e: unknown) {
      console.error(e);
      notifyError(msg("Error deleting the {{lower_case entry_type.name}}"));
    }
  }
  {{/if}}

  renderDetail(entryRecord: EntryRecord<{{pascal_case entry_type.name}}>) {
    return html`
      <sl-card>
      	<div slot="header" class="row" style="gap: 8px">
          <span style="font-size: 18px; flex: 1;">${msg("{{title_case entry_type.name}}")}</span>

          {{#if crud.update}}
          <sl-icon-button .src=${wrapPathInSvg(mdiPencil)} @click=${() => { this._editing = true; } }></sl-icon-button>
          {{/if}}
          {{#if crud.delete}}
          <sl-icon-button .src=${wrapPathInSvg(mdiDelete)} @click=${() => this.delete{{pascal_case entry_type.name}}()}></sl-icon-button>
          {{/if}}
        </div>

        <div class="column" style="gap: 16px;">
  
	{{#each entry_type.fields}}
          {{#if widget}}	  
          <div class="column" style="gap: 8px;">
	        <span><strong>${msg("{{title_case field_name}}")}</strong></span>
            {{#if (not (eq cardinality "vector") )}}
 	        <span style="white-space: pre-line">{{> (concat field_type.type "/" widget "/detail/render") field_name=field_name variable_to_read=(concat "entryRecord.entry." (snake_case field_name) ) }}</span>
            {{else}}
              {{> Vec/detail/render variable_to_read=(concat "entryRecord.entry." (snake_case field_name) ) field_name=field_name field_type=field_type widget=widget }}
            {{/if}}
	  </div>

 	  {{/if}}
	{{/each}}
      </div>
      </sl-card>
    `;
  }
  
  render() {
    const {{camel_case entry_type.name}} = this.{{camel_case coordinator_zome_manifest.name}}Store.{{camel_case (plural entry_type.name)}}.get(this.{{camel_case entry_type.name}}Hash).{{#if crud.update}}latestVersion${{else}}entry${{/if}}.get();

    switch ({{camel_case entry_type.name}}.status) {
      case 'pending': 
        return html`<div
          style="display: flex; flex-direction: column; align-items: center; justify-content: center; flex: 1;"
        >
          <sl-spinner style="font-size: 2rem;"></sl-spinner>
        </div>`;
      case 'error': 
        return html`<display-error
          .headline=${msg("Error fetching the {{lower_case entry_type.name}}")}
          .error=${ {{camel_case entry_type.name}}.error}
        ></display-error>`;
      case 'completed':
  {{#if crud.update}}
        if (this._editing) {
      	  return html`<edit-{{kebab_case entry_type.name}}
      	    .{{camel_case entry_type.name}}Hash=${this.{{camel_case entry_type.name}}Hash}
            @{{kebab_case entry_type.name}}-updated=${async () => { this._editing = false; } }
    	    @edit-canceled=${() => { this._editing = false; } }
      	    style="display: flex; flex: 1;"
      	  ></edit-{{kebab_case entry_type.name}}>`;
        }

  {{/if}}
          return this.renderDetail({{camel_case entry_type.name}}.value);
    }
  }
  
  static styles = [sharedStyles];
}
