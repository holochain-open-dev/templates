import { {{pascal_case entry_type.name}} } from './types.js';

{{#merge previous_file_content}}
  {{#match_scope (concat "export class " (pascal_case coordinator_zome_manifest.name) "Store {" ) }}
    {{#merge untrimmed_previous_scope_content}}
      {{#each entry_type.fields}}
        {{#if linked_from}}
          {{#if (includes ../previous_file_content (concat (camel_case (plural linked_from.name)) " = new LazyHoloHashMap((" (camel_case linked_from.name) "Hash: ActionHash) => ({"))}}
            {{#match_scope (concat (camel_case (plural linked_from.name)) " = new LazyHoloHashMap((" (camel_case linked_from.name) "Hash: ActionHash) => ({" )}}
    {{../previous_scope_content}}
              {{#if ../crud.delete}}
    {{camel_case (plural ../entry_type.name)}}: {
      live$: mapCompleted(
        liveLinksSignal(
          this.client,
          {{camel_case linked_from.singular_arg}},
          () => this.client.get{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
          '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
        ), 
        links => slice(this.{{camel_case (plural ../entry_type.name)}}, links.map(l => l.target))
      ),
      deleted$: mapCompleted(
        deletedLinksSignal(
          this.client,
          {{camel_case linked_from.singular_arg}},
          () => this.client.getDeleted{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
          '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
        ), links => slice(this.{{camel_case (plural ../entry_type.name)}}, links.map(l => l[0].hashed.content.target_address))
      ),
    },
              {{else}}
    {{camel_case (plural ../entry_type.name)}}$: mapCompleted(
        liveLinksSignal(
          this.client,
          {{camel_case linked_from.singular_arg}},
          () => this.client.get{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
          '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
        ), links => slice(this.{{camel_case (plural ../entry_type.name)}}, links.map(l => l.target))
      ),
              {{/if}}
            {{/match_scope}}
          {{/if}}
        {{/if}}
      {{/each}}
    {{/merge}}
  /** {{title_case entry_type.name}} */

  {{camel_case (plural entry_type.name)}} = new LazyHoloHashMap(({{camel_case entry_type.name}}Hash: {{#if entry_type.reference_entry_hash}}EntryHash{{else}}ActionHash{{/if}}) => ({
    {{#if crud.update}}
    latestVersion$: latestVersionOfEntrySignal(this.client, () => this.client.getLatest{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash)),
    original$: immutableEntrySignal(() => this.client.getOriginal{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash)),
    allRevisions$: allRevisionsOfEntrySignal(this.client, () => this.client.getAllRevisionsFor{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash)),
    {{else}}
    entry$: immutableEntrySignal(() => this.client.get{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash)),
    {{/if}}
    {{#if crud.delete}}
    deletes$: deletesForEntrySignal(this.client, {{camel_case entry_type.name}}Hash, () => this.client.getAllDeletesFor{{pascal_case entry_type.name}}({{camel_case entry_type.name}}Hash)),
    {{/if}}
    {{#each entry_type.fields}}
      {{#if linked_from}}
        {{#if (eq (pascal_case linked_from.name) (pascal_case ../entry_type.name))}}
          {{#if ../crud.delete}}
    {{camel_case (plural ../entry_type.name)}}: {
        live$: mapCompleted(
          liveLinksSignal(
            this.client,
            {{camel_case linked_from.singular_arg}},
            () => this.client.get{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
            '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
          ), links => links.map(l => l.target)
        ),
        deleted$: mapCompleted(
          deletedLinksSignal(
            this.client,
            {{camel_case linked_from.singular_arg}},
            () => this.client.getDeleted{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
            '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
          ), links=> links.map(l => l[0].hashed.content.target_address)
        ),
    },
          {{else}}
    {{camel_case (plural ../entry_type.name)}}$: mapCompleted(
        liveLinksSignal(
          this.client,
          {{camel_case linked_from.singular_arg}},
          () => this.client.get{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
          '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
        ), 
        links => links.map(l => l.target)
      ),
          {{/if}}
        {{/if}}
      {{/if}}
    {{/each}}
  }));

      {{#each entry_type.fields}}
        {{#if linked_from}}
          {{#if (and (ne (pascal_case linked_from.name) (pascal_case ../entry_type.name)) (not (includes ../previous_file_content (concat (camel_case (plural linked_from.name)) " = new LazyHoloHashMap((" (camel_case linked_from.name) "Hash: ActionHash) => ({"))))}}
            {{#if ../crud.delete}}
  {{camel_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} = new LazyHoloHashMap(({{camel_case linked_from.singular_arg}}: {{linked_from.hash_type}}) => ({
      live$: mapCompleted(
        liveLinksSignal(
          this.client,
          {{camel_case linked_from.singular_arg}},
          () => this.client.get{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
          '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
        ), links => slice(this.{{camel_case (plural ../entry_type.name)}}, links.map(l => l.target))
      ),
      deleted$: mapCompleted(
        deletedLinksSignal(
          this.client,
          {{camel_case linked_from.singular_arg}},
          () => this.client.getDeleted{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
          '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
        ), links=> slice(this.{{camel_case (plural ../entry_type.name)}}, links.map(l => l[0].hashed.content.target_address))
      ),
  }));
            {{else}}
  {{camel_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}} = new LazyHoloHashMap(({{camel_case linked_from.singular_arg}}: {{linked_from.hash_type}}) => mapCompleted(
      liveLinksSignal(
        this.client,
        {{camel_case linked_from.singular_arg}},
        () => this.client.get{{pascal_case (plural ../entry_type.name)}}For{{pascal_case linked_from.name}}({{camel_case linked_from.singular_arg}}),
        '{{pascal_case linked_from.name}}To{{pascal_case (plural ../entry_type.name)}}'
      ), links => slice(this.{{camel_case (plural ../entry_type.name)}}, links.map(l => l.target))
    ),
  );
            {{/if}}
          {{/if}}
        {{/if}}
      {{/each}}
  {{/match_scope}}
{{/merge}}
