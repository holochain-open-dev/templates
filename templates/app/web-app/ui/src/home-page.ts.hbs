import { Router, Routes } from "@holochain-open-dev/elements";
import { AsyncResult, SignalWatcher } from "@holochain-open-dev/signals";
import { ProfilesStore, profilesStoreContext } from "@holochain-open-dev/profiles";
import { LitElement, css, html } from "lit";
import { customElement } from "lit/decorators.js";
import { EntryRecord } from "@holochain-open-dev/utils";
import { consume } from "@lit/context";
import { msg } from "@lit/localize";

import "@shoelace-style/shoelace/dist/components/tab-group/tab-group.js";
import "@shoelace-style/shoelace/dist/components/tab-panel/tab-panel.js";
import '@holochain-open-dev/profiles/dist/elements/profile-list-item-skeleton.js';
import '@holochain-open-dev/profiles/dist/elements/agent-avatar.js';

import { rootRouterContext } from "./context.js";
import { appStyles } from './app-styles.js';

@customElement("home-page")
export class HomePage extends SignalWatcher(LitElement) {

  /**
   * @internal
   */
  @consume({ context: routerContext, subscribe: true })
  rootRouter!: Router;

  /**
   * @internal
   */
  @consume({ context: profilesStoreContext, subscribe: true })
  @property()
  _profilesStore!: ProfilesStore;

  routes = new Routes(this, [
    {
      path: "",
      enter: () => {
        this.routes.goto("tab1/");
        return false;
      },
    },
    {
      path: "tab1/*",
      render: () => html`<div>TODO: replace me</div> `,
    },
    {
      path: "tab2/*",
      render: () => html`<div>TODO: replace me</div> `,
    },
    {
      path: "tab3/",
      render: () => html`<div>TODO: replace me</div> `,
    },
  ]);

  renderMyProfile() {
    const myProfile = this._profilesStore.myProfile.get();

    switch (myProfile.status) {
      case 'pending':
        return html`<profile-list-item-skeleton></profile-list-item-skeleton>`;
      case 'error':
        return html`<display-error
            .headline=${msg('Error fetching the profile')}
            .error=${myProfile.error}
            tooltip
          ></display-error>`;
      case 'completed':
        return html`<div
            class="row"
            style="align-items: center;"
            slot="actionItems"
          >
            <agent-avatar .agentPubKey=${this._client.myPubKey}></agent-avatar>
            <span style="margin: 0 16px;">${myProfile.value?.entry.nickname}</span>
          </div>`;
    }
  }

  render() {
    return html`
      <div class="column fill">
        <div class="row top-bar">
          <span class="title" style="flex: 1">${msg("{{title_case app_name}}")}</span>

          <div class="row" style="gap: 16px" slot="actionItems">
            ${this.renderMyProfile()}
          </div>
        </div>

        <sl-tab-group placement="start" style="flex: 1">
          <sl-tab
            slot="nav"
            .active=${this.routes.currentPathname().endsWith("orders/")}
            @click=${() => {
              this.routes.goto("orders/");
            }}
            >${msg("Orders")}</sl-tab
          >
          <sl-tab
            slot="nav"
            .active=${this.routes.currentPathname().endsWith("producers/")}
            @click=${() => {
              this.routes.goto("producers/");
            }}
            >${msg("Producers")}</sl-tab
          >
          <sl-tab
            slot="nav"
            .active=${this.routes.currentPathname().endsWith("members/")}
            @click=${() => {
              this.routes.goto("members/");
            }}
            >${msg("Members")}</sl-tab
          >

          <sl-tab-panel> ${this.routes.outlet()}</sl-tab-panel>
        </sl-tab-group>
      </div>
    `;
  }

  static styles = [
    css`
      :host {
        display: flex;
        flex: 1;
      }

    `,
    ...appStyles,
  ];
}
