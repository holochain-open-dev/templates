import { LitElement, html } from 'lit';
import { state, property, customElement } from 'lit/decorators.js';
import { AgentPubKey, EntryHash, ActionHash, Record } from '@holochain/client';
import { consume } from '@lit/context';
import { SignalWatcher } from '@holochain-open-dev/signals';
import { hashProperty, sharedStyles, wrapPathInSvg } from '@holochain-open-dev/elements';
import { localized, msg } from '@lit/localize';
import { mdiInformationOutline } from '@mdi/js';

import '@holochain-open-dev/elements/dist/elements/display-error.js';
import '@shoelace-style/shoelace/dist/components/spinner/spinner.js';
import '@shoelace-style/shoelace/dist/components/icon/icon.js';

{{#if (not (eq from_referenceable.hash_type "AgentPubKey") )}}
import './{{kebab_case from_referenceable.name}}-summary.js';
{{else}}
import '@holochain-open-dev/profiles/dist/elements/agent-avatar.js';
{{/if}}
import { {{pascal_case coordinator_zome_manifest.name}}Store } from '../{{kebab_case coordinator_zome_manifest.name}}-store.js';
import { {{camel_case coordinator_zome_manifest.name}}StoreContext } from '../context.js';

/**
 * @element {{kebab_case (plural from_referenceable.name)}}-for-{{kebab_case to_referenceable.name}}
 */
@localized()
@customElement('{{kebab_case (plural from_referenceable.name)}}-for-{{kebab_case to_referenceable.name}}')
export class {{pascal_case (plural from_referenceable.name)}}For{{pascal_case to_referenceable.name}} extends SignalWatcher(LitElement) {

  /**
   * REQUIRED. The {{pascal_case to_referenceable.singular_arg}} for which the {{plural (pascal_case from_referenceable.name)}} should be fetched
   */
  @property(hashProperty('{{kebab_case to_referenceable.singular_arg}}'))
  {{camel_case to_referenceable.singular_arg}}!: {{to_referenceable.hash_type}}; 

  /**
   * @internal
   */
  @consume({ context: {{camel_case coordinator_zome_manifest.name}}StoreContext, subscribe: true })
  {{camel_case coordinator_zome_manifest.name}}Store!: {{pascal_case coordinator_zome_manifest.name}}Store;
  
  firstUpdated() {
    if (this.{{camel_case to_referenceable.singular_arg}} === undefined) {
      throw new Error(`The {{camel_case to_referenceable.singular_arg}} property is required for the {{kebab_case (plural from_referenceable.name)}}-for-{{kebab_case to_referenceable.name}} element`);
    }
  }

  renderList(hashes: Array<{{from_referenceable.hash_type}}>) {
    if (hashes.length === 0) 
      return html` <div class="column center-content" style="gap: 16px;">
        <sl-icon
          style="color: grey; height: 64px; width: 64px;"
          .src=${wrapPathInSvg(mdiInformationOutline)}
        ></sl-icon>
        <span class="placeholder">${msg("No {{lower_case (plural from_referenceable.name)}} found for this {{lower_case to_referenceable.name}}")}</span>
      </div>`;
    
    return html`
      <div class="column" style="gap: 16px;">
        ${hashes.map(hash => 
      {{#if (not (eq from_referenceable.hash_type "AgentPubKey") )}}
          html`<{{kebab_case from_referenceable.name}}-summary .{{camel_case from_referenceable.name}}Hash=${hash}></{{kebab_case from_referenceable.name}}-summary>`
      {{else}}
          html`<agent-avatar .agentPubKey=${hash}></agent-avatar>`
      {{/if}}
        )}
      </div>
    `;
  }

  render() {
    const {{#if (eq from_referenceable.hash_type "AgentPubKey")}}agents{{else}}map{{/if}} = this.{{camel_case coordinator_zome_manifest.name}}Store.{{#if (eq to_referenceable.hash_type "AgentPubKey")}}{{plural (camel_case from_referenceable.name)}}For{{pascal_case to_referenceable.name}}.get(this.{{camel_case to_referenceable.singular_arg}}){{else}}{{camel_case (plural to_referenceable.name)}}.get(this.{{camel_case to_referenceable.singular_arg}}).{{plural (camel_case from_referenceable.name)}}{{#if (not delete)}}${{/if}}{{/if}}{{#if delete}}.live${{/if}}.get();
    
    switch ({{#if (eq from_referenceable.hash_type "AgentPubKey")}}agents{{else}}map{{/if}}.status) {
      case 'pending':
        return html`<div style="display: flex; flex-direction: column; align-items: center; justify-content: center; flex: 1;"
        >
          <sl-spinner style="font-size: 2rem;"></sl-spinner>
        </div>`;
      case 'error':
        return html`<display-error
          .headline=${msg("Error fetching the {{lower_case (plural from_referenceable.name)}}")}
          .error=${ {{#if (eq from_referenceable.hash_type "AgentPubKey")}}agents{{else}}map{{/if}}.error}
        ></display-error>`;
      case 'completed':
        {{#if (eq from_referenceable.hash_type "AgentPubKey")}}
        return this.renderList(agents.value);
        {{else}}
        return this.renderList(Array.from(map.value.keys()));
        {{/if}}
    }
  }
  
  static styles = [sharedStyles];
}
